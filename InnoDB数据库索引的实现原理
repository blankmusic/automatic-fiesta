InnoDB也是使用B+Tree作为索引结构，但具体的实现方式却与MyISAM截然不同，
第一个重大区别
是InnoDB的数据文本本身就是索引文件。从上文知道，MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。
而在InnoDB中，表数据文件本身就是按照B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的
主键，因此InnoDB表数据文件本身就是主索引。
InnoDB主索引同时也是数据文件，可以知道叶节点包含了完整的数据记录。这种索引叫做聚集索引。因为InnoDB的文件本身要按主键聚集，
所以InnoDB要求表必须有主键（MyISAM可以没有），如果没有显示指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，
如果不存在这种列，则MySQL会自动会InnoDB表生成一个隐含字段作为主键，这个字段的长度为6个字节，类型为长整型。

第二个
与MyISAM索引不同的是InnoDB的辅助索引data域存储相应记录主键的值而不是地址。换句话说InnoDB的所有辅助索引都引用主键作为data域。
例如，下图为定义在col3上的一个辅助索引。辅助索引需要检索两遍索引，首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。


了解不同的存储引擎的索引实现方式对于正确使用和优化索引都非常有帮助，例如知道了InnoDB索引的实现后，就很容易明白为什么，不建议使用过长
的字段作为主键，因为所有的辅助索引都是以主键的值作为data域，即，都引用主索引，过长的主索引会令辅助索引变得过大。
再例如，用非单调的字段作为主键在InnoDb中不是一个好主意，因为，InnoDB数据文件本身是一颗B+Tree，非单调的主键，会造成在插入新纪录时，
数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择。
