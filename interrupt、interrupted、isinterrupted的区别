interrupt()向当前调用者发出中断信号，interrupt（）方法发出的中断信号只能被wait（），sleep（） join（）这三个方法捕捉到并产生中断。

interrupted()和isInterrupted()的主要区别是前者会将中断状态清除而后者不会。java多线程的中断机制是用内部标识来实现的，调用Thread.interrupt()
来中断一个线程就会设置中断表示为true。当中断线程调用静态方法Thread.interrupted()来检查中断状态时，中断状态会被清零。而非静态方法isinterrupted()
用来查询其他线程的中断状态并且不会改变中断状态标识。简单地说就是任何跑出InterruptedException异常的方法都会将中断状态清零。无论如何，一个线程的中
断状态有可能被其他线程调用中断来改变。

interrupt方法是用于中断线程的，调用该方法的状态将被置为“中断”状态。
注意：线程中断仅仅是这只线程的中断状态位，不会停止线程。需要用户自己去监视线程的状态位并做处理。
支持线程中断的方法（也就是线程中断后会跑出InterruptedException的方法，比如这里的sleep。以及Object.wait等方法）就是在监视线程的中断状态，一旦线
程的中断状态被设置为“中断状态“就会抛出中断异常。
interrupted和isinterrupted前者是静态的，后者不是。但实际上都是在调用同一个方法，只是interrupted方法传入参数为true，而isinterrupted传入参数为false。
参数明仔为 ClearInterrupted表示是否清楚中断状态。所以金泰方法将会清除中断状态，而实例方法则不会。

一般来说，阻塞函数 如：Thread.sleep、Thread.join、Object.wait、LockSupport.park等在检查到线程的中断状态时，会跑出interruptedException，同时
会清除线程的中断状态。
对于InterruptedEXception的处理可以有两种情况
1 外层代码可以处理这个异常，直接抛出这个异常即可。
2 如果不能抛出这个异常，比如在run()方法内，因为在得到这个异常的同时，线程的中断状态已经被清除了，需要保留线程的中断状态，
则需要调用 Thread.currentThread().interrupt()。
