多线程之间的通信

1 共享变量
2 wait notify
3 Lock/Conidtion机制
4 管道机制：创建管道输出流PiedOutputStream pos和管道输入流PipedInputStream pis，将pos和pis匹配，pos.connect(pis)，将pos赋给信息输入线程，
pis赋给信息获取线程，就可以实现线程间的通讯了。

管道流虽然用起来方便，但是也有一些缺点。
 1 管道流只能在两个线程之间传递数据，
 线程1和2同时从pis中read数据，当线程producer网管道流中写入一段数据后，每一时刻只有一个线程能获取到数据，并不是两个线程都能获取到Producer发送来的数据，
 因此一个管道流只能用于两个线程间的通讯。不仅仅是管道流，其他IO方式都是一对一传输。
 2 管道流只能实现单向发送，如果要两个线程之间互通讯，则需要两个管道流。
 
 进程间的通信
 
 1 管道（pipe）：管道可用于具有亲缘关系进程间的通讯允许一个进程和另一个与它有共同祖先的进程之间进行通信。
 2 命名管道（named pipe）：命名管道客服了管道没有名字的限制，因此除具有管道所具有的功能外，它还允许无亲缘关系的进程之间的通信。
 命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。
 3 信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信，进程还可以发送信号给进程本身；linux除了支持
 Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，
 用sigaction函数重新实现了signal函数）
 4 消息（Message）队列：消息队列是消息的链接表，跑酷哦Posix消息队列System v消息队列。有足够的权限的进程可以向队列中添加消息，被赋予读权限的进程则可以
 读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。
 5 共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率低下而设计的。旺旺与其他通信机制，如信号量结合使用。
 来达到进程间的同步以及互斥。
 6 内存映射（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。
 7 信号量（semaphore）：主要作为进程间以及统一进程不同线程之间的同步手段。
 8 套接口（Socket）：更为一般的进程间通信机制，可以用于不同机器间的进程间通信。起初是由Unix系统的BAD分支开发出来的，但现在一般可以移植到其他类Unix
 系统上：Linux和System V的变种都支持套接字。
 
 几种线程间的通信机制
 1 锁机制
  1-1 互斥所：提供了以排他方式阻止数据结构被并发修改的方法
  1-2 读写锁：允许多个线程同时读共享数据，而对写操作互斥
  1-3 条件变量：可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。
2、信号量机制：包括无名线程信号量与有名线程信号量
3、信号机制：类似于进程间的信号处理。
线程间通信的主要目的是用于线程同步，所以线程没有象进程通信中用于数据交换的通信机制。
