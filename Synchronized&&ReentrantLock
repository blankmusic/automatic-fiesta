Synchronized与ReentrantLock的比较：
   1 锁的实现： synchronized 是JVM实现的，而ReentrantLock是JDK实现的。
   2 性能  ：新版本的java对synchronized进行了很多的优化，例如自旋锁等，目前看来它和ReentrantLock的性能基本持平了，
     因此性能不再试选择ReentrantLock的理由。synchronized有更大的性能优化空间，应该优先考虑synchronized。
   3功能：ReentrantLock多了些高级的功能，
   4使用选择：除非需要使用ReentrantLock的高级功能，否则优先选择synchronized。这是因为synchronized是jvm实现的锁机构，jvm原生的支持它。
     而ReentrantLock不是所有的jdk版本都支持，。并且使用synchronized可以不用担心因为没有释放锁而导致死锁的问题，因为jvm确保锁的释放。
ReentrantLock相对于synchronized多出的三个高级功能
    1 等待可中断
      在持有锁的线程长时间不释放锁的时候，等待的线程可以选择放弃等待。
    2 公平锁
      按照申请的顺序来一次获得锁陈伟公平锁。synchronized是非公平锁，可以通过构造函数实现公平锁。
    公平锁和非公平锁。这两个机制的意思是：对于多线程来说，公平锁会依赖线程进来的顺序，后进来的线程后获得锁。
    而非公平锁的意思就是后面进来的线程也可以和前面等待锁的线程同时竞争锁资源。非公平锁的效率更高，因为公平锁还要
    考虑是不是线程队列中的第一个线程，才会让其获得锁。
    3 绑定多个Condition
      通过多次newcondition 可以获得多个Condition对象，可以简单的实现比较复杂的线程同步功能。
