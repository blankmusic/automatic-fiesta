线程安全的概念：
代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的吗，
而且其他的变量的值也和预期是一样的，就是线程安全的。一个线程安全的计数器类的同一个实例对象在被多个线程使用的情况下，也
不会出现失误。

集合类分为线程安全的和非线程安全的。
Vector是同同步方法来实现的线程安全的，而和它向上的ArrayList不是线程
安全的。


线程安全的实现方法
1 互斥同步（阻塞同步）
Synchronized和ReentrantLock
2 非阻塞同步
互斥同步的最主要问题就是进行线程阻塞和唤醒带来的性能问题，因此这种同步也称为阻塞同步（blocking Synchronization）
从处理问题的方式上说，互斥同步属于一种悲观的并发策略，总是认为只要不去做正确的同步措施（例如加锁），那就肯定会出现问题，
无论共享数据是否真的会出现问题，它都要进行加锁（这里讨论的是概念模型，实际上虚拟机会优化很大一部分的不必要的加锁）、用户
核心态转换
维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。

随着硬件指令集的发展，我们有了另一个选择：基于冲突检测的乐观并发策略，通俗的说，就是先进行操作，如果没有其他的线程共享数据，
那操作就成功了；如果共享数据有争用，产生了冲突，那就再采取其他的补偿措施（最常见的补偿措施就是不断的重试，直到成功为止），这
种乐观的并发策略的许多实现都不需要把线程挂起。因此这种同步操作为非阻塞同步（Non-blocking-synchronization）。

乐观锁需要操作和冲突检测这两个步骤具有原子性，这里就不能在使用互斥同步来保证了，只能靠硬件来完成。
硬件支持的原子性操作最典型的是：比较并交换（Compare-and-Swap ，CAS）

CAS指令
CAS指令需要有3个操作数，分别是内存位置（在java中可以简单理解为变量的内存地址，用V表示）、就得预期值（用A表示）
和新值（用B表示）。CAS指令执行时，当且仅当V符合旧预期值A时，处理器用新值B更新B更新V值，否则就不执行更新。但是
无论是否更新了V值，都会返回V的旧值，上述的处理过程是一个原子操作。

J.U.C包里面的正=整数原子类AtomicInteger，其中的compareAndSet和getAndIncrement方法都使用了Unsafe类的CAS操作。

CAS存在的问题，以及解决的方法

ABA问题：如果一个变量长期读取的时候是A值，它的值被改成了B，后来又被改回了A，那么CAS操作就会误认为他从来没有被改变过。
J.U.C提供了“AtomicStampedReference”来解决这个问题，它可以通过控制变量值的版本来保证CAS的正确性。大部分情况下ABA问题
不会影响程序的并发的正确性，如果需要解决ABA问题，就使用传统的互斥同步可能会比原子类更加高效。

3 无同步方案
要保证线程的安全，并不一定就要进行同步，了这没有因果关系。同步只是保证数据共享争用是的正确性的手段，如果一个方法本来就
不涉及共享数据，那它自然就不需进行任何的同步去保证正确性，因此会有一些代码天生就是线程安全的。

3.1可重入代码

这种代码也叫做纯代码（pure code），可以再代码执行的任何时刻来中断它，转而去执行另外一段代码（包括递归调用它本身），
而在控制权返回后，原来的程序不会出现任何错误。对线程安全来说，可重入性更最基本的特性，它可以保证线程安全，即所有的可
重入代码都是线程阿暖的，但是并非所有的线程安全的代码都是可重入的。
可重入代码有一些共同的调整，例如，不依赖存储在堆上的数据和公用的系统资源、用到的状态量都由参数中传入，不调用非可重入
方法等。可以通过一个简单的原则来判断代码的可重入性：如果有这个方法它的返回结果是可以预测的，只要输入相同的数据，都能
返回相同的结果，那么它就满足可重入性的要求，当然也就是线程安全的。

3.2栈封闭

多个线程访问同一个方法的局部变量时，不会出现线程安全问题，因为局部变量存储在栈中，是线程私有的。

3.3线程本地存储（tread Local storage）
如果一段代码中的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一线程中执行。如果能保证，我们就可以
吧共享数据的可见范围限制在同一个线程内，这样无需同步也能保证线程之间不会出现数据争用的问题。

符合这种特点的应用并不少见，大部分的消费队列的架构模式，如生产者-消费者没事都会将产品的消费过程尽量在一个线程中消费完。
其中最重的一个应用就是景丹的Web交互模型中的“一个请求对应一个服务器线程（Thread-pre-Request）”的处理方式，这种处理方
式的广泛应用使得很多的Web服务端应用都可使用线程本地存储来解决线程安全问题。

可以使用java.lang.ThreadLocal类来实现线程本地存储功能。
ThreadLocal从理论上将病史用来解决多线程并发问题的，因为根本不存在多线程竞争。在一些场景，尤其是使用线程池，
由于ThreadLocal.ThreadLocalMap的底层数据结构导致ThreadLocal有内存泄漏的问题，尽可能在每次使用 ThreadLocal 
后手动调用 remove()，以避免出现 ThreadLocal 经典的内存泄漏甚至是造成自身业务混乱的风险。





