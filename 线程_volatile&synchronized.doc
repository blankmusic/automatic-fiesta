Volatile关键字
一单一个共享的变量 类的成员变量或者类的静态成员变量 背volatile修饰之后 那么就具备了两层含义

1 保证了不同线程对这个变量的可见性 即一个线程改变了某个变量的值 这个新值对其他线程是立即可见的
2 禁止指令重排
volatile 保证了 有序性 可见性


可见性： 所有的变量都存储在主内存中，每个线程有自己的工作内存，工作内存存储在高速缓存区或者寄存器中。
保存了该线程使用的变量的主内存的副本拷贝。线程只能直接操作工作区内存中的变量，不同线程之间进行变量值
传递只能通过主内存来完成。
    
   线程不直接和主内存进行数据交互，而是通过线程的工作内存来进行这一工作，这也是线程间的数据不可见的本质原因，
   因此要实现volatile关键字的可见性要实现以下两点
    1 被volatile关键字修饰的变量被修改时，会强制刷新主内存中的值
    2 修改volatile关键字修饰的变量后 会导致其他线程内的对应变量值失效，因此再读取该变量的值得时候要从主内存中读取值。
    
    
有序性： 内存屏障 内volatile修饰关键字，在赋值之后会执行“load addl $0x0, (%esp)”操作这个操作 相当于一个内存屏障
（指令重排序是不能把后面的指令重排序内存屏障之前的位置），只有一个cpu访问内存时不粗要内存屏障（什么是指令重排：是指cpu采用允许
将多条指令不按照程序规定的顺序分开发送给各相应的电路单元处理），volatile会出发jvm的内存屏障侧罗，内存屏障保证有序性jvm有4种内存屏障。
   简单来说，volatile会在一定程度上影响jvm指令集的优化策略，在volatile之前和之后的指令集不会乱序越过volatile变量执行




synchronized 关键字解析
    Synchronized 修饰方法和代码块以及类。
    是一种可重入锁，可以保证方法或者代码块在运行时，同一时刻只有一个线程可以进入到临界区（互斥性），同时保证共享变量的内存可见性。
    java中的每个对象都可以作为锁，synchronized的四种应用方式
    普通同步方法：锁是当前实例对象
    静态同步方法：锁是当前类的class对象
    同步代码块：锁是括号中的对象
    同步类：作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。
synchronized可重入性
    从互斥锁的设计上来说，当一个线程试图操作一个有其他线程持有的对象锁的临界资源时，将会处于阻塞状态，
    但当一个线程再次请求自己持有的对象锁的临界资源时，这种情况属于重入锁，请求将会成功。
    在java中，synchrod是基于原子性的内部锁机制，是可重入的。因此，在一个线程调用synchronized方法的同时，
    在其他方法体内部调用该对象的另一个synchronized方法，也就是说一个线程得到一个资源后再次请求该对象锁，是允许的。
    这就是synchronized的可重入性。另外，当子类继承父类时，子类也是可以通过可重入锁调用父类的同步方法。
中断与synchronized
    事实上，线程的中断操作对于正在等待获取的锁对象的synchronized方法或代码块是不起作用的，也就是对于synchronized来说，
    如果一个线程在等待锁，那么结果就只有两种，要么获得这把锁继续执行，要么就保存等待，即使调用中断线程的方法，也不会生效。
等待唤醒机制与synchronized
    这次所指的等待唤醒机制，是notify/notifyAll和wait方法，在使用这三种方法的时候，必须处于synchronized代码块，或者synchronized方法中。
    否则就会抛出 IlligalMonitorStateException异常，这是因为 调用这几个方法前必须拿到当前对象的监视器monitor对象，也就是说，
    notify/notifyAll和wait方法依赖于monitor对象，在前面的分析中，我们知道monitor、对象存在于对象头的Markword
    中（存储monitor引用指针），而synchronized关键字可以获取monitor，这也就是为什么这三种方法必须在synchronized代码块或者
    synchronized方法调用的原因。
synchronized的底层语义原理
    java虚拟机中的同步synchronized基于进入和退出管理Monitor对象实现，
    无论是显示同步（有明确的的monitorentre和monitorexit指令，即代码同步块） 还是隐式同步都是如此。
    在java中同步被用到的最多的就是synchronized关键字修饰的同步方法。
    同步方法并不是由monitorentre 和monitorexit指令来实现同步的，而是由方法调用指令读取运行时常量池中的方法的ACC_SYNCHRONIZED标志来
    隐式实现的。
    代码同步块 是有monitorentre和monitorexit指令来实现同步的，在jvm中，对象在内存中的布局分为三块区域，对象头，实例数据，对齐填充。
    
         monitorentre:
             每个对象有一个monitor,即监视器，当且仅当monitor被占用时，这个monitor就被锁住了。线程执行monitorentre指令是为了尝试获取
             该monitor的所有权，过程为：
             1 如果一个monitor的进入数为0，那么该线程直接进入monitor，并且将monitor进入数置1，该线程成为该monitor的所有者。
             2 如果该进程已占用该monitor，则直接进入，并且monitor进入数加1.
             3 若该线程未曾占有该monitor，即该monitor被其他的线程占有，那么该线程阻塞，直到该monitor的进入数为0，此时该线程
             会继续尝试获取该monitor
        monitorexit：
              执行monitorexit的线程必须是已拥有该monitor的线程，执行monitorexit指令后，该monitor的进入数见1，直到该monitor的进入数为0
              此时该线程不再是该monitor的拥有者，其他被阻塞进入该monitor的线程可以尝试获取该monitor的所有权。
              
        volatile和synchronized的区别
        
          volatile和synchronized的特点
             首先需要理解线程安全的两个方面：执行控制和内存可见
             执行控制的目的：
             是控制代码执行的顺序记忆是否可以并发执行，
             内存可见：
             控制的是线程执行结果在内存中对其他现成的可见性。
             根据java的内存模型的实现，线程在具体执行时，会先拷贝主内存数据到线程本地（CPU缓存），操作完成后再把结果从线程本地刷新
             到主内存。
             Synchronized 关键字解决的是执行控制的问题，他会阻止其他线程获取当前对象的监控锁，这样就使得当前对象中被sychronized保护的
             代码块无法被其他的线程访问，也就无法并发执行。更重要的是synchronized关键字会建立一个内存屏障，内存屏障保证了所有的CPU操作
             结果都会直接刷新到主内存中，从而保证了内存可见性，同时也使得鲜活的这个锁的线程的所有操作，都happens-before于随后获得这个锁
             的所有线程的操作。
             
             volatile关键字解决的是内存的可见性的问题，会使得所有对volatile变量的读写都会直接刷新到主内存，即保证了变量的可见性。这样
             就能满足一些对变量可见性有要求，但对读取顺序没有要求需求。使用volatile关键之仅仅能实现对原始变量的原子性（intx short long boolean等）
             ，但需要特别注意的是，volatile不能保证对符合操作的原子性，即使是i++实际上也是由多个原子操作组成的，read i；inc，write i，
             加入多线线程同时执行i++，volatile只能保证它们执行的i是同一块内存，但依然可能出现写入脏数据的情况，在java5中提供了原子数据类型
             atomic wrapper class，对它们的increase之类的操作都是原子性操作，不需要使用synchronized关键字。
             
             
             对于volatile关键字 当且仅当满足如下条件时使用
             1 对变量的写入操作不依赖变量的当前值，或者你确保只有单个线程更新变量的值。
             2 该变量没有包含在具有其他变量的不变式中。
             
        volatile和synchronized的区别
             volatile的本质是在告诉jvm当前的变量在工作内存中的值是不确定的，需要从主内存中读取；synchronized则是锁定当前变量，使得只有
             当前线程可以访问该变量，其他线程被阻塞。
             volatile仅仅能使用在变量级别；synchronized可以使用在变量 方法和类级别。
             volatile仅能实现变量的修改的可见性，不能保证原子性；二synchronized可以保证变量的修改可见性和原子性。
             volatile不会造成线程阻塞；所以吃肉你这都可能会造成线程的阻塞。
             volatile标记的变量不会被编译器优化；sychronized标记的变量可以被编译器优化。
             
             
             
             
             
             
             
             
             
             
             
             
    
    
    
    
    
