什么是线程池，线程池的组成部分，线程池的作用 如何使用线程池

什么是线程池
线程池是基于复用的思想：类似WEB服务器等系统，长期看来内存内部需要使用大量的线程处理请求，但单词请求响应时间通常比较短。
此时java基于操作系统本地调用方式大量的创建和销毁线程会造成性能瓶颈和资源浪费。
若使用线程池技术可以实现工作线程的复用，即一个工作线程的创建和销毁周期内可以执行多个任务，从而从总体上见底了线程的创建和销毁的
频率和时间，提升了系统的性能。
因此在程序启动的时候就创建若干个线程和响应处理，它们被称为线程池，里面的线程叫做工作线程。

一个线程池的四个基本组成部分
1 线程池管理器（ThreadPool）：用于创建和管理线程池，包括 创建线程池，销毁线程池，添加新任务。
2 工作线程（PoolWorker）：线程池中线程，在没有任务时处于等待状态，可以循坏的执行任务。 
3 任务接口（Task）：每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等。
4 任务队列（taskQueue）：用于存放没有处理的任务提供一种缓存机制。


线程池的作用
在程序启动的时候就创建若干线程来响应处理，他们被称为线程池，里面的线程叫做工作线程。
1 降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的损耗。
2 提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。
3 提高线程的可管理性。


创建线程池的四种方式
1 newSingleThreadPool 单个线程的线程池，及线程池中每次只有一个线程工作，单线程串行执行任务。
2 newFixedThreadPool（n） 固定数量的线程池，每提交一个任务就是一个线程，直到达到线程池的最大数量，然后后面进入等待队列直到前面的任务完成才继续执行。
3 newCacheThreadPool 推荐使用 可缓存线程池，，当线程的大小超过可处理任务所需的线程，那么就会回收部分空闲（一般是60秒无执行）的线程，当任务来时，
                     又智能的添加新线程来执行
4 newScheduleThreadPool 大小无限制的线程池，支持定时和周期性的执行线程。


线程池的相关参数
corePoolSize-线程池核心线程数
maximumPoolSize-池中允许的最大线程数
KeepAliveTime-当活动线程数大于核心线程数是，空闲多余线程最大存活时间
Unit-KeepAliveTime： 参数的时间单位
workQueue-执行前用于存放任务的队列。次队列仅保持由execute方法提交的Runnable任务。
ThreadFactory-执行程序创建新线程时的使用的工厂
handler-由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。


线程池的实现原理
提交一个线程到线程池中，线程池的处理流程如下
1 如果线程池中的线程数量小于corePoolSize（核心线程数量），那么会直接开启一个新的核心线程来执行任务，即使此时有空闲线程存在。
2 如果线程池中的线程数量大于等于corePoolSize，那么任务会被插入到任务丢列中排队，等待被执行，此时并不添加新的线程。
3 如果在步骤2 中由于任务队列已满导致无法将新任务进行排队，这时候有两种情况
 1 线程数量未达到maximumPoolsSize，立即启动一个非核心线程来执行任务
 2线程数量已达到maximumPoolSize，拒绝执行任务，ThreadPoolExecutor会通过RejectExecutionhandler ,抛出RejectExecutionException异常。





